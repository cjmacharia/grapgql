type Query {
		comments(query: String): [Comment!]!
		users(query: String): [User!]!
		me: User!
		book(query: String): [Post!]!
	}

  type Mutation {
		createUser(data: CreateUserInput): User!
		createPost(data: createPostInput): Post!
		createComment(data: CreateCommentInput): Comment!
		deleteUser(id:ID!): User!
		deletePost(id: ID!):Post!
		deleteComment(id:ID!): Comment!
		updateUser(id: ID! data: updateUserInput): User!
		updatePost(id: ID! data: updatePostInput): Post!
		updateComment(id: ID! data: updateCommentInput): Comment!

	}
	input CreateUserInput {
		name: String!
		 email: String!
		  age: Int
	} 
	input updateUserInput {
		name: String
		 email: String
		  age: Int
	}
	input createPostInput {
		title: String!
		body: String!
		published: Boolean!
		author: ID!
	}
	input updatePostInput {
		title: String
		body: String
		published: Boolean
		author: ID
	}
	input CreateCommentInput {
		text: String
		author:ID!
		post: ID!
	}
	input updateCommentInput {
		text: String
		author:ID
		post: ID
	}
	type Comment {
		id: ID!
		text: String!
		author: User!
		post: Post!
	}

	type User {
		id: ID!
		name: String!
		email: String!
		age: Int
		posts: [Post!]!
		comments: [Comment!]!
	}

	type Post {
		id: ID!
		title: String! 
		body: String! 
		published: Boolean!
		author: User!
		comments: [Comment!]!
	}
	type PostSubscriptionPayload {
		mutation: MutationType!
		data: Post!
	}
	type CommentSubscriptionPayload {
		mutation: MutationType!
		data: Comment!
	}
	type Subscription {
		comment(postId: ID!):CommentSubscriptionPayload!
		post: PostSubscriptionPayload!

	}

	enum MutationType {
		CREATED
		UPDATED
		DELETED
	}